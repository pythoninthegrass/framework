# code: language=ansible

---
- hosts: localhost
  connection: local
  gather_facts: true
  # debugger: on_failed
  any_errors_fatal: true
  vars:
    os_environment:
      - key: EDITOR
        value: vim
    container_name: ubuntu
    container_image: ubuntu:latest
    container_command: sleep 1d
  pre_tasks:
    - name: Get running ansible user
      ansible.builtin.set_fact:
        local_user: "{{ lookup('env', 'USER') }}"
        home_dir: "{{ lookup('env', 'HOME') }}"
        cacheable: true
      delegate_to: localhost
      tags: qa

    - name: Get OS release
      ansible.builtin.set_fact:
        os_release: "{{ ansible_distribution }}-{{ ansible_distribution_major_version }}"
        major_ver: "{{ ansible_distribution_major_version }}"
        distro: "{{ ansible_distribution }}"
      tags: qa

    - name: Cross-platform dependencies
      ansible.builtin.package:
        name:
        - acl
        - ansible
        - ansible-lint
        - bats
        - ca-certificates
        - cloud-init
        - git
        - inxi
        - python3
        - python3-redis
        - python3-psutil
        - tree
        - vim
        state: present
      become: true

    # TODO: QA
    # - name: Enable redis
    #   ansible.builtin.service:
    #     name: redis
    #     enabled: true
    #     state: started
  tasks:
    - name: Setup directory for git repos
      ansible.builtin.file:
        path: "{{ home_dir }}/git"
        state: directory
        owner: "{{ local_user }}"
        group: "{{ local_user }}"
        # mode: 01777
        recurse: true
      become: false

    - name: Install debian packages
      ansible.builtin.apt:
        name:
        - apt-transport-https
        - bats
        - build-essential
        - ca-certificates
        - cloud-init
        - curl
        - docker-ce
        - docker-ce-cli
        - containerd.io
        - gnupg-agent
        - net-tools
        - python3
        - python3-pip
        - software-properties-common
        - tree
        - vim
        update_cache: yes
        state: present
      become: true
      when: ansible_os_family == "Debian"

    - name: Enable rpmfusion repos
      ansible.builtin.dnf:
        name: "{{ item }}"
        state: present
        disable_gpg_check: yes
      with_items:
        - "https://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-{{major_ver}}.noarch.rpm"
        - "https://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-{{major_ver}}.noarch.rpm"
      become: true

    - name: Accept GPG keys
      ansible.builtin.shell: |
        rpm --import https://packages.cloud.google.com/yum/doc/yum-key.gpg
        rpm --import https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
        rpm --import https://packages.microsoft.com/keys/microsoft.asc
      args:
        executable: /bin/bash
      become: true
      when: ansible_os_family == "RedHat"

    - name: Add /etc/yum.repos.d/kubernetes.repo
      ansible.builtin.copy:
        dest: /etc/yum.repos.d/kubernetes.repo
        content: |
          [kubernetes]
          name=Kubernetes
          baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
          enabled=1
          gpgcheck=1
          repo_gpgcheck=1
          gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg
                 https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
        owner: root
        group: root
        mode: 0644
      become: true
      when: ansible_os_family == "RedHat"

    - name: Add VSCode repo
      ansible.builtin.copy:
        dest: /etc/yum.repos.d/vscode.repo
        content: |
          [code]
          name=Visual Studio Code
          baseurl=https://packages.microsoft.com/yumrepos/vscode
          enabled=1
          gpgcheck=1
          gpgkey=https://packages.microsoft.com/keys/microsoft.asc
        owner: root
        group: root
        mode: 0644
      become: true
      when: ansible_os_family == "RedHat"

    - name: Add extra repos
      ansible.builtin.shell: |
        dnf config-manager --add-repo https://download.docker.com/linux/{{ distro | lower }}/docker-ce.repo
        dnf config-manager --add-repo https://rpm.releases.hashicorp.com/fedora/hashicorp.repo
        dnf config-manager --set-enabled fedora-cisco-openh264
      args:
        executable: /bin/bash
      become: true
      when: ansible_os_family == "RedHat"

    - name: Install redhat packages
      ansible.builtin.dnf:
        name:
        - automake
        - budgie-desktop
        - checkpolicy
        - containerd.io
        - code
        - curl
        - dnf-plugins-core
        - docker-ce
        - docker-ce-cli
        - docker-compose-plugin
        - gcc
        - gcc-c++
        - git
        - gnome-tweaks
        - gnome-extensions-app
        - gstreamer1-plugin-openh264
        - kernel-devel
        - libsodium
        - make
        - mozilla-openh264
        - ncurses-devel
        - nemo
        - openssl-devel
        - policycoreutils
        - policycoreutils-python-utils
        - python3-devel
        - python3-pip
        - python3-psutil
        - python3-setuptools
        - python3-wheel
        - python3-dnf-plugins-extras-versionlock
        - redhat-rpm-config
        - qt5-qtbase
        - qt5-qtbase-devel
        - rpm-build
        - rpmdevtools
        - vim-enhanced
        update_cache: yes
        state: present
      become: true
      when: ansible_os_family == "RedHat"

    - name: Install multimedia
      ansible.builtin.shell: |
        dnf groupinstall -y "Multimedia"
      args:
        executable: /bin/bash
      become: true
      when: ansible_os_family == "RedHat"

    - name: Pin running kernel
      ansible.builtin.shell: |
        dnf versionlock kernel
      args:
        executable: /bin/bash
      become: true
      when: ansible_os_family == "RedHat"

    - name: Get starship install script
      get_url:
        url: https://starship.rs/install.sh
        dest: /tmp/starship_install.sh
        mode: '0755'

    - name: Install starship
      shell:
        cmd: /tmp/starship_install.sh --yes
        executable: /bin/sh
      become: yes

    - name: Create starship config directory
      file:
        path: "{{ home_dir }}/.config/"
        state: directory

    - name: Copy starship config
      copy:
        src: ../config/starship.toml
        dest: "{{ home_dir }}/.config/starship.toml"

    - name: Download asdf
      ansible.builtin.git:
        repo: https://github.com/asdf-vm/asdf.git
        dest: "{{ home_dir }}/.asdf"
        version: v0.11.3
        force: true
      become: false

    - name: Install asdf plugins
      ansible.builtin.shell: |
        source {{ home_dir }}/.asdf/asdf.sh
        asdf plugin-add {{ item }}
      args:
        executable: /bin/bash
      with_items:
        - awscli
        - gcloud
        - golang
        - helm
        - helmfile
        - kubectl
        - kubectx
        - kustomize
        - nodejs
        - python
        - ruby
        - terraform
      become: false

    - name: Install latest runtime
      ansible.builtin.shell: |
        source {{ home_dir }}/.asdf/asdf.sh
        asdf install {{ item }} latest
      args:
        executable: /bin/bash
      with_items:
        - awscli
        - gcloud
        - golang
        - helm
        - helmfile
        - kubectl
        - kubectx
        - kustomize
        - nodejs
        - python
        - ruby
        - terraform
      become: false

    - name: Install k8s dependencies
      ansible.builtin.dnf:
        name:
        - kubeadm
        update_cache: yes
        state: present
      when: ansible_os_family == "RedHat"

    - name: Install k3d
      ansible.builtin.shell: |
        curl -s https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash
      args:
        executable: /bin/bash
      when: ansible_os_family == "RedHat"

    - name: Activate ip_tables module
      ansible.builtin.shell: |
        modprobe ip_tables
        modprobe br_netfilter
        echo ip_tables > /etc/modules-load.d/ip_tables.conf
        echo br_netfilter > /etc/modules-load.d/br_netfilter.conf
      args:
        executable: /bin/bash
      when: ansible_os_family == "RedHat"

    - name: Whitelist docker network
      ansible.posix.firewalld:
        zone: trusted
        interface: docker0
        permanent: yes
        state: enabled

    # TODO: QA
    - name: Enable docker service
      ansible.builtin.service:
        name: docker
        enabled: true
        state: started
      become: true
      tags: qa

    - name: Add user to docker group
      ansible.builtin.user:
        name: "{{ local_user }}"
        groups: docker
        append: yes
      become: true
      # tags: qa

    - name: Install docker python module
      pip:
        name: docker
        state: present
      become: false
      # tags: qa

    - name: Pull default Docker image
      community.docker.docker_image:
        name: "{{ container_image }}"
        source: pull
      # tags: qa

    - name: Create default containers
      community.docker.docker_container:
        name: "{{ container_name }}"
        image: "{{ container_image }}"
        command: "{{ container_command }}"
        state: present
      # tags: qa

    - name: Update Packages
      ansible.builtin.dnf:
        name: "*"
        update_cache: yes
        state: "latest"
      when: ansible_os_family == "RedHat"
      # tags: qa
