# code: language=ansible

---
- hosts: localhost
  connection: local
  become: false
  gather_facts: true
  # debugger: on_failed
  any_errors_fatal: true
  vars:
    os_environment:
      - key: EDITOR
        value: vim
    container_name: ubuntu
    container_image: ubuntu:latest
    container_command: sleep 1d
  pre_tasks:
    - name: Get running ansible user
      ansible.builtin.set_fact:
        local_user: "{{ lookup('env', 'USER') }}"
        home_dir: "{{ lookup('env', 'HOME') }}"
        work_dir: "{{ playbook_dir | dirname }}"
        cacheable: true
      tags: qa

    - name: Top-level directory in project
      ansible.builtin.shell: git rev-parse --show-toplevel
      register: tld
      tags: qa

    - name: Set tld stdout fact
      ansible.builtin.set_fact:
        tld: "{{ tld.stdout }}"
      tags: qa

    - name: Get OS release
      ansible.builtin.set_fact:
        os_release: "{{ ansible_distribution }}-{{ ansible_distribution_major_version }}"
        major_ver: "{{ ansible_distribution_major_version }}"
        distro: "{{ ansible_distribution }}"
      tags: qa

    - name: Cross-platform dependencies
      ansible.builtin.package:
        name:
        - acl
        - ansible
        - ansible-lint
        - bats
        - ca-certificates
        - cloud-init
        - dbus-daemon
        - dbus-tools
        - dconf
        - gh
        - git
        - inxi
        - neofetch
        - nemo
        - nemo-fileroller
        - nemo-image-converter
        - nemo-preview
        - nemo-terminal
        - pass
        - pre-commit
        - python3.10
        - python3
        - python3-redis
        - python3-psutil
        - restic
        - tree
        - vim
        state: present
      become: true
      tags: qa

    # TODO: QA
    # - name: Enable redis
    #   ansible.builtin.service:
    #     name: redis
    #     enabled: true
    #     state: started
  tasks:
    - name: Setup directory for git repos
      ansible.builtin.file:
        path: "{{ home_dir }}/git"
        state: directory
        owner: "{{ local_user }}"
        group: "{{ local_user }}"
        # mode: 01777
        recurse: false
      become: false

    - name: Install debian packages
      ansible.builtin.apt:
        name:
        - apt-transport-https
        - bats
        - build-essential
        - ca-certificates
        - cloud-init
        - curl
        - gnupg-agent
        - net-tools
        - python3
        - python3-pip
        - software-properties-common
        - tree
        - vim
        update_cache: yes
        state: present
      become: true
      when: ansible_os_family == "Debian"

    # https://www.reddit.com/r/Fedora/comments/x7ym7l/new_to_fedora_how_to_speed_up_dnf/
    - name: Enable dnf-makecache.timer
      ansible.builtin.service:
        name: dnf-makecache.timer
        enabled: true
        state: started
      become: true
      when: ansible_os_family == "RedHat"

    - name: dnf.conf sane defaults
      ansible.builtin.lineinfile:
        path: /etc/dnf/dnf.conf
        state: present
        firstmatch: true
        line: "{{ item }}"
        regexp: "{{ item }}"
        insertafter: EOF
      with_items:
        - 'timeout=10'
        - 'minrate=50000'
      become: true
      when: ansible_os_family == "RedHat"

    - name: dnf-makecache.conf
      ansible.builtin.copy:
        src: "{{ tld }}/config/dnf-makecache.conf"
        dest: /etc/dnf/aliases.d/dnf-makecache.conf
        owner: root
        group: root
        mode: 0644
      become: true
      when: ansible_os_family == "RedHat"

    - name: Enable rpmfusion repos
      ansible.builtin.dnf:
        name: "{{ item }}"
        state: present
        disable_gpg_check: yes
      with_items:
        - "https://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-{{major_ver}}.noarch.rpm"
        - "https://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-{{major_ver}}.noarch.rpm"
      become: true
      when: ansible_os_family == "RedHat"

    - name: Accept GPG keys
      ansible.builtin.shell: |
        rpm --import https://packages.cloud.google.com/yum/doc/yum-key.gpg
        rpm --import https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
        rpm --import https://packages.microsoft.com/keys/microsoft.asc
      args:
        executable: /bin/bash
      become: true
      when: ansible_os_family == "RedHat"

    - name: Add /etc/yum.repos.d/kubernetes.repo
      ansible.builtin.copy:
        dest: /etc/yum.repos.d/kubernetes.repo
        content: |
          [kubernetes]
          name=Kubernetes
          baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
          enabled=1
          gpgcheck=1
          repo_gpgcheck=1
          gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg
                 https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
        owner: root
        group: root
        mode: 0644
      become: true
      when: ansible_os_family == "RedHat"

    - name: Add VSCode repo
      ansible.builtin.copy:
        dest: /etc/yum.repos.d/vscode.repo
        content: |
          [code]
          name=Visual Studio Code
          baseurl=https://packages.microsoft.com/yumrepos/vscode
          enabled=1
          gpgcheck=1
          gpgkey=https://packages.microsoft.com/keys/microsoft.asc
        owner: root
        group: root
        mode: 0644
      become: true
      when: ansible_os_family == "RedHat"

    - name: Add extra repos
      ansible.builtin.shell: |
        dnf config-manager --add-repo https://download.docker.com/linux/{{ distro | lower }}/docker-ce.repo
        dnf config-manager --add-repo https://rpm.releases.hashicorp.com/fedora/hashicorp.repo
        dnf config-manager --add-repo https://pkgs.tailscale.com/stable/fedora/tailscale.repo
        dnf config-manager --set-enabled fedora-cisco-openh264
      args:
        executable: /bin/bash
      become: true
      when: ansible_os_family == "RedHat"
      # tags: qa

    - name: Install redhat packages
      ansible.builtin.dnf:
        name:
        - automake
        - bat
        - budgie-desktop
        - checkpolicy
        - containerd.io
        - code
        - curl
        - dmz-cursor-themes
        - dnf-utils
        - dnf-plugins-core
        - gcc
        - gcc-c++
        - git
        - gnome-shell-extension-appindicator
        - gnome-tweaks
        - gnome-extensions-app
        - gstreamer1-plugin-openh264
        - gtk4
        - gtksourceview5
        - gtk-update-icon-cache
        - kernel-devel
        - libsodium
        - make
        - meson
        - nemo
        - nemo-fileroller
        - nemo-image-converter
        - nemo-preview
        - nemo-terminal
        - libadwaita-devel
        - libpanel
        - mozilla-openh264
        - ncurses-devel
        - openssl-devel
        - policycoreutils
        - policycoreutils-python-utils
        - python3-devel
        - python3-dnf-plugins-extras-versionlock
        - python3-pip
        - python3-psutil
        - python3-setuptools
        - python3-wheel
        - redhat-rpm-config
        - qt5-qtbase
        - qt5-qtbase-devel
        - rpm-build
        - rpmdevtools
        - tailscale
        - vim-enhanced
        update_cache: yes
        state: present
      become: true
      when: ansible_os_family == "RedHat"

    - name: Install multimedia
      ansible.builtin.shell: |
        dnf groupinstall -y "Multimedia"
      args:
        executable: /bin/bash
      become: true
      when: ansible_os_family == "RedHat"

    - name: Start tailscale
      ansible.builtin.service:
        name: tailscaled
        state: started
        enabled: yes
      become: true

    - name: Download gnome-shell-extension-installer (git)
      ansible.builtin.git:
        repo: https://github.com/brunelli/gnome-shell-extension-installer.git
        dest: /tmp/gnome-shell-extension-installer
        version: master

    - name: Install gnome-shell-extension-installer
      ansible.builtin.shell: |
        cd /tmp/gnome-shell-extension-installer
        chmod +x gnome-shell-extension-installer
        mv gnome-shell-extension-installer /usr/bin/
      args:
        executable: /bin/bash
      become: true
      when: ansible_os_family == "RedHat"

    # gnome-extensions list | sort -u
    - name: Install gnome extensions
      ansible.builtin.shell: |
        results=$(echo q | gnome-shell-extension-installer --search "{{ item }}" | awk '/"uuid"/ {print $0}')

        # match first package (pk)
        pk=$(echo $results | grep -o '"pk":\s[0-9]*' | awk '{print $2}')

        # install extension
        gnome-shell-extension-installer --yes $pk
      args:
        executable: /bin/bash
      with_items:
        - appindicatorsupport@rgcjonas.gmail.com
        - apps-menu@gnome-shell-extensions.gcampax.github.com
        - arcmenu@arcmenu.com
        - background-logo@fedorahosted.org
        - caffeine@patapon.info
        - clipboard-indicator@tudmotu.com
        - dash-to-panel@jderose9.github.com
        - launch-new-instance@gnome-shell-extensions.gcampax.github.com
        - multi-monitors-add-on@spin83
        - places-menu@gnome-shell-extensions.gcampax.github.com
        - quick-settings-tweaks@qwreey
        - trayIconsReloaded@selfmade.pl
        - window-list@gnome-shell-extensions.gcampax.github.com
      become: true
      when: ansible_os_family == "RedHat"
      # tags: qa

    - name: Install flatpaks
      ansible.builtin.shell: |
        flatpak install -y {{ item }}
      args:
        executable: /bin/bash
      with_items:
        - flathub com.axosoft.GitKraken
        - flathub com.discordapp.Discord
        - flathub org.gnome.Geary
        - flathub com.slack.Slack
        - flathub com.spotify.Client
        - flathub com.valvesoftware.Steam
        - flathub io.typora.Typora
      become: true
      # tags: qa

    # TODO: `travis995.0f91801` is hardcoded; possibly use gh cli/api instead
    - name: Download appimagelauncher
      ansible.builtin.shell: |
        LATEST_RELEASE=$(curl -L -s -H 'Accept: application/json' https://github.com/TheAssassin/AppImageLauncher/releases/latest | jq -r '.tag_name')
        URL="https://github.com/TheAssassin/AppImageLauncher/releases/download/${LATEST_RELEASE}"
        USER_AGENT="User-Agent: Mozilla/5.0 (X11; Fedora; Linux x86_64; rv:94.0) Gecko/20100101 Firefox/94.0"
        LATEST_RELEASE="${LATEST_RELEASE:1}"
        PKG_NAME="appimagelauncher-${LATEST_RELEASE}-travis995.0f91801.x86_64.rpm"
        if [ ! -f "/tmp/${PKG_NAME}" ]; then
          cd /tmp && curl -LJO -H "${USER_AGENT}" "${URL}/${PKG_NAME}"; cd -
        fi
      args:
        executable: /bin/bash
      become: false
      when: ansible_os_family == "RedHat"

    - name: Install appimagelauncher
      ansible.builtin.shell: |
        dnf install -y /tmp/appimagelauncher-*.rpm
      become: true
      when: ansible_os_family == "RedHat"

    - name: ~/Applications directory
      ansible.builtin.file:
        path: "{{ home_dir }}/Applications"
        state: directory
        owner: "{{ local_user }}"
        group: "{{ local_user }}"
        mode: '0755'
        recurse: false
      become: false

    - name: Download upnote appimage
      ansible.builtin.shell: |
        USER_AGENT="User-Agent: Mozilla/5.0 (X11; Fedora; Linux x86_64; rv:94.0) Gecko/20100101 Firefox/94.0"
        PKG_NAME="UpNote.AppImage"
        URL="https://upnote-release.s3.us-west-2.amazonaws.com/${PKG_NAME}"
        if [ ! -f "/tmp/${PKG_NAME}" ]; then
          cd /tmp && curl -LJO -H "${USER_AGENT}" "${URL}"; cd -
        fi
      args:
        executable: /bin/bash
      become: false
      when: ansible_os_family == "RedHat"

    - name: Download landrop appimage
      ansible.builtin.shell: |
        USER_AGENT="User-Agent: Mozilla/5.0 (X11; Fedora; Linux x86_64; rv:94.0) Gecko/20100101 Firefox/94.0"
        PKG_NAME="LANDrop-latest-linux.AppImage"
        URL="https://releases.landrop.app/${PKG_NAME}"
        if [ ! -f "/tmp/${PKG_NAME}" ]; then
          cd /tmp && curl -LJO -H "${USER_AGENT}" "${URL}"; cd -
        fi
      args:
        executable: /bin/bash
      become: false
      when: ansible_os_family == "RedHat"

    - name: Get starship install script
      get_url:
        url: https://starship.rs/install.sh
        dest: /tmp/starship_install.sh
        mode: '0755'

    - name: Install starship
      shell:
        cmd: /tmp/starship_install.sh --yes
        executable: /bin/sh
      become: yes

    - name: Create starship config directory
      file:
        path: "{{ home_dir }}/.config/"
        state: directory

    - name: Copy starship config
      copy:
        src: ../config/starship.toml
        dest: "{{ home_dir }}/.config/starship.toml"

    - name: Download asdf
      ansible.builtin.git:
        repo: https://github.com/asdf-vm/asdf.git
        dest: "{{ home_dir }}/.asdf"
        version: v0.11.3
        force: true
      become: false

    - name: Add asdf plugins
      ansible.builtin.shell: |
        source {{ home_dir }}/.asdf/asdf.sh
        asdf plugin-add {{ item }}
      args:
        executable: /bin/bash
      with_items:
        - awscli
        - gcloud
        - golang
        - helm
        - helmfile
        - kubectl
        - kubectx
        - kustomize
        - lazydocker https://github.com/comdotlinux/asdf-lazydocker.git
        - nodejs
        - poetry https://github.com/asdf-community/asdf-poetry.git
        - python
        - ruby
        - rust https://github.com/code-lever/asdf-rust.git
        - terraform
      become: false

    - name: Install latest runtime
      ansible.builtin.shell: |
        source {{ home_dir }}/.asdf/asdf.sh
        asdf install {{ item }} latest
        asdf global {{ item }} latest
      args:
        executable: /bin/bash
      with_items:
        - awscli
        - gcloud
        - golang
        - helm
        - helmfile
        - kubectl
        - kubectx
        - kustomize
        - lazydocker
        - nodejs
        - poetry
        - python
        - ruby
        - rust
        - terraform
      become: false

    - name: Set poetry options
      ansible.builtin.shell: |
        poetry config virtualenvs.prefer-active-python true
        poetry config virtualenvs.in-project true
        poetry config virtualenvs.create true
      args:
        executable: /bin/bash
      become: false

    - name: Install pip packages
      ansible.builtin.pip:
        name:
        - pipx
        - tldr
      become: false

    - name: Install k8s dependencies
      ansible.builtin.dnf:
        name:
        - kubeadm
        update_cache: yes
        state: present
      when: ansible_os_family == "RedHat"

    - name: Install k3d
      ansible.builtin.shell: |
        curl -s https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash
      args:
        executable: /bin/bash
      when: ansible_os_family == "RedHat"

    # - name: Install nautilus-dropbox
    #   ansible.builtin.shell: |
    #     dnf install -y https://linux.dropbox.com/packages/fedora/nautilus-dropbox-2022.12.05-1.fedora.x86_64.rpm
    #   args:
    #     executable: /bin/bash
    #   become: true
    #   when: ansible_os_family == "RedHat"

    - name: Install nemo-dropbox
      ansible.builtin.dnf:
        name: nemo-dropbox
        state: present
      become: true

    - name: Create dropbox service override directory
      ansible.builtin.file:
        path: "{{ home_dir }}/.config/systemd/user/dropbox.service.d/"
        state: directory

    - name: Create dropbox service override file
      ansible.builtin.lineinfile:
        path: "{{ home_dir }}/.config/systemd/user/dropbox.service.d/override.conf"
        line: |
          [Service]
          ExecStart=/usr/bin/dropbox start -i
          Environment=DISPLAY=:0
        insertafter: EOF
        state: present
        create: yes

    - name: Update Packages
      ansible.builtin.dnf:
        name: "*"
        update_cache: yes
        state: "latest"
      become: true
      when: ansible_os_family == "RedHat"
      # tags: qa
